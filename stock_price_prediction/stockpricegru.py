# -*- coding: utf-8 -*-
"""StockPriceGRU.ipynb
Automatically generated by Colaboratory.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, GRU

df = pd.read_csv('AAPL1.csv', header = 0)
df = df['Open'].values
df = df.reshape(-1,1)

#Split data to 80% of train & 20% of test 
df_train = np.array(df[:int(df.shape[0]*0.8)])
df_test = np.array(df[int(df.shape[0]*0.8)-50:])

# Normalize data
sc = MinMaxScaler(feature_range=(0, 1))
df_train = sc.fit_transform(df_train)
df_test = sc.fit_transform(df_test)

#prepare data
def create_dataset(df):
  X = []
  y = []

  for i in range(50, df.shape[0]):
    X.append(df[i-50:i,0])

    y.append(df[i,0])

  X = np.array(X)
  y = np.array(y)
  return X, y

X_train, y_train = create_dataset(df_train)
X_test, y_test = create_dataset(df_test)

# reshape input to 3D
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
print(X_train.shape, y_train.shape, X_test.shape, y_test.shape)

# GRU model
model = Sequential()
model.add(GRU(units = 32, input_shape = (X_train.shape[1],1)))
model.add(Dense(units = 16,activation = 'relu'))
model.add(Dense(units = 1))
model.compile(loss = 'mean_squared_error', optimizer = 'adam')
model.summary()

history = model.fit(X_train, y_train, epochs = 50, batch_size = 32, verbose = 2, validation_data=(X_test, y_test))

# plot history
plt.title('GRU')
plt.plot(history.history['loss'], label='train')
plt.plot(history.history['val_loss'], label='test')
plt.legend()
plt.show()

# make a prediction
prediction = model.predict(X_test)
prediction = sc.inverse_transform(prediction)

y_test_scaled = sc.inverse_transform(y_test.reshape(-1, 1))

fig, ax = plt.subplots(figsize=(8,4))
plt.title('GRU')
ax.plot(y_test_scaled, color='red', label='True Testing Price')
plt.plot(prediction, color='blue', label='Predicted Testing Price')
plt.legend()
