# -*- coding: utf-8 -*-
"""CNNAutoEncatter.ipynb

Automatically generated by Colaboratory.
"""

import tensorflow as tf
import numpy as np
import pandas as pd
import seaborn as sns

tf.keras.backend.clear_session()

#Adding Seed so that random initialization is consistent
import os
from numpy.random import seed
seed(1)
import tensorflow
tensorflow.random.set_seed(2)

from google.colab import drive
drive.mount('/content/drive/')

!cp "drive/My Drive/dataset.py" .

import dataset

#Prepare input data
train_path='/content/drive/MyDrive/training_data/'
classes = ['cats']
print(classes)
num_classes = len(classes)

# 10% of the data will automatically be used for validation
validation_size = 0.1
img_size = 48
num_channels = 3
sample_size = 7980

data = dataset.read_train_sets(train_path, img_size, ['cats'], validation_size=validation_size, sample_size=sample_size)


print("Complete reading input data. Will Now print a snippet of it")
print("Number of files in Training-set:\t\t{}".format(len(data.train.labels)))
print("Number of files in Validation-set:\t{}".format(len(data.valid.labels)))

"""## Creating the AutoEncoder with three hidden layers"""

import keras
import tensorflow.keras.layers
import tensorflow.keras.models
import tensorflow.keras.optimizers
from keras.layers import Conv2D, MaxPool2D, UpSampling2D

# Encoder
inputs = keras.Input(shape=(img_size,img_size,3), name='cat_image')

encoder_Conv_layer1 = Conv2D(32,(3,3), activation = 'relu',padding = 'same', name="en_Covn_1")(inputs)
encoder_Pool_layer1 = MaxPool2D((2,2), padding ='same')(encoder_Conv_layer1)

encoder_Conv_layer2 = Conv2D(16,(3,3), activation = 'relu',padding = 'same', name="en_Covn_2")(encoder_Pool_layer1)
encoder_Pool_layer2 = MaxPool2D((2,2), padding ='same')(encoder_Conv_layer2)

encoder_Conv_layer3 = Conv2D(16,(3,3), activation = 'relu',padding = 'same', name="en_Covn_3")(encoder_Pool_layer2)
encoder_Pool_layer3 = MaxPool2D((2,2), padding ='same')(encoder_Conv_layer3)

# Decoder
decoder_Conv_layer1 = Conv2D(16,(3,3), activation = 'relu',padding = 'same', name="de_Covn_1")(encoder_Pool_layer3)
decoder_UP_layer1 = UpSampling2D((2,2))(decoder_Conv_layer1)

decoder_Conv_layer2 = Conv2D(16,(3,3), activation = 'relu',padding = 'same', name="de_Covn_2")(decoder_UP_layer1)
decoder_UP_layer2 = UpSampling2D((2,2))(decoder_Conv_layer2)

decoder_Conv_layer3 = Conv2D(32,(3,3), activation = 'relu',padding = 'same', name="de_Covn_3")(decoder_UP_layer2)
decoder_UP_layer3 = UpSampling2D((2,2))(decoder_Conv_layer3)

outputs = Conv2D(3,(3,3), activation = 'sigmoid',padding = 'same', name="Outputs")(decoder_UP_layer3)

# Autoencoder
ae = tensorflow.keras.models.Model(inputs, outputs, name="Autoencoder")
ae.summary()

customAdam = keras.optimizers.Adam(lr=0.001)
ae.compile(optimizer=customAdam,  # Optimizer
              # Loss function to minimize
              loss="mean_squared_error",
              # List of metrics to monitor
              metrics=["mean_squared_error"])

"""## Training the model"""

x_train, _, _, _ = data.train.next_batch(7182)
x_valid, _, _, _ = data.valid.next_batch(798)

print('# Fit model on training data')

history = ae.fit(x_train, 
                    x_train, #we pass it the input itself as desired output
                    batch_size=256,
                    epochs=60,
                    # We pass it validation data to
                    # monitor loss and metrics
                    # at the end of each epoch
                    validation_data=(x_valid, x_valid))

"""# visual"""

import matplotlib.pyplot as plt

# plot history
plt.title('Train Loss & Test Loss')
plt.plot(history.history['loss'], label='train')
plt.plot(history.history['val_loss'], label='test')
plt.legend()
plt.show()

valid_predictions = ae.predict(x_valid[:40])
for index in range(20):
    instance = x_valid[index]
    decoded_img = valid_predictions[index]


    plt.figure(figsize=(20, 4))
    subplot = plt.subplot(2, 10, 1)
    plt.imshow(instance)

    subplot.get_xaxis().set_visible(False)
    subplot.get_yaxis().set_visible(False)

    subplot = plt.subplot(2, 10, 2)
    plt.imshow(decoded_img)

    subplot.get_xaxis().set_visible(False)
    subplot.get_yaxis().set_visible(False)
